#ifndef _D3D9_RENDERER_
#define _D3D9_RENDERER_

#include <windows.h>
#include <ddraw.h>
#include <d3d9.h>

typedef struct _D3DVERTEXBUFFERDESC
{
    DWORD dwSize;
    DWORD dwCaps;
    DWORD dwFVF;
    DWORD dwNumVertices;
} D3DVERTEXBUFFERDESC, *LPD3DVERTEXBUFFERDESC;

typedef struct _D3DDP_PTRSTRIDE
{
    LPVOID lpvData;
    DWORD dwStride;
} D3DDP_PTRSTRIDE;

typedef struct _D3DDRAWPRIMITIVESTRIDEDDATA
{
    D3DDP_PTRSTRIDE position;
    D3DDP_PTRSTRIDE normal;
    D3DDP_PTRSTRIDE diffuse;
    D3DDP_PTRSTRIDE specular;
    D3DDP_PTRSTRIDE textureCoords[D3DDP_MAXTEXCOORD];
} D3DDRAWPRIMITIVESTRIDEDDATA, *LPD3DDRAWPRIMITIVESTRIDEDDATA;

typedef struct _D3DPrimCaps
{
    DWORD dwSize;
    DWORD dwMiscCaps;                 /* Capability flags */
    DWORD dwRasterCaps;
    DWORD dwZCmpCaps;
    DWORD dwSrcBlendCaps;
    DWORD dwDestBlendCaps;
    DWORD dwAlphaCmpCaps;
    DWORD dwShadeCaps;
    DWORD dwTextureCaps;
    DWORD dwTextureFilterCaps;
    DWORD dwTextureBlendCaps;
    DWORD dwTextureAddressCaps;
    DWORD dwStippleWidth;             /* maximum width and height of */
    DWORD dwStippleHeight;            /* of supported stipple (up to 32x32) */
} D3DPRIMCAPS, * LPD3DPRIMCAPS;

typedef struct _D3DDeviceDesc7
{
    DWORD dwDevCaps;
    D3DPRIMCAPS dpcLineCaps;
    D3DPRIMCAPS dpcTriCaps;
    DWORD dwDeviceRenderBitDepth;
    DWORD dwDeviceZBufferBitDepth;

    DWORD dwMinTextureWidth, dwMinTextureHeight;
    DWORD dwMaxTextureWidth, dwMaxTextureHeight;

    DWORD dwMaxTextureRepeat;
    DWORD dwMaxTextureAspectRatio;
    DWORD dwMaxAnisotropy;

    float dvGuardBandLeft;
    float dvGuardBandTop;
    float dvGuardBandRight;
    float dvGuardBandBottom;

    float dvExtentsAdjust;
    DWORD dwStencilCaps;

    DWORD dwFVFCaps;
    DWORD dwTextureOpCaps;
    WORD wMaxTextureBlendStages;
    WORD wMaxSimultaneousTextures;

    DWORD dwMaxActiveLights;
    float dvMaxVertexW;
    GUID deviceGUID;

    WORD wMaxUserClipPlanes;
    WORD wMaxVertexBlendMatrices;

    DWORD dwVertexProcessingCaps;

    DWORD dwReserved1;
    DWORD dwReserved2;
    DWORD dwReserved3;
    DWORD dwReserved4;
} D3DDEVICEDESC7, * LPD3DDEVICEDESC7;

typedef HRESULT(CALLBACK* LPD3DENUMDEVICESCALLBACK7)(LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC7, LPVOID);
typedef HRESULT(CALLBACK* LPD3DENUMPIXELFORMATSCALLBACK)(LPDDPIXELFORMAT lpDDPixFmt, LPVOID lpContext);

DECLARE_INTERFACE_(IDirect3DDevice7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice7 methods ***/
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC7) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMPIXELFORMATSCALLBACK, LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ void**) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7, DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7*) PURE;
    STDMETHOD(Clear)(THIS_ DWORD, D3DRECT*, DWORD, D3DCOLOR, float, DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE, D3DMATRIX*) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE, D3DMATRIX*) PURE;
    STDMETHOD(SetViewport)(THIS_ D3DVIEWPORT9*) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE, D3DMATRIX*) PURE;
    STDMETHOD(GetViewport)(THIS_ D3DVIEWPORT9*) PURE;
    STDMETHOD(SetMaterial)(THIS_ D3DMATERIAL9*) PURE;
    STDMETHOD(GetMaterial)(THIS_ D3DMATERIAL9*) PURE;
    STDMETHOD(SetLight)(THIS_ DWORD,D3DLIGHT9*) PURE;
    STDMETHOD(GetLight)(THIS_ DWORD,D3DLIGHT9*) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE, DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE, LPDWORD) PURE;
    STDMETHOD(BeginStateBlock)(THIS) PURE;
    STDMETHOD(EndStateBlock)(THIS_ LPDWORD) PURE;
    STDMETHOD(PreLoad)(THIS_ LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE, DWORD, LPVOID, DWORD, DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE, DWORD, LPVOID, DWORD, LPWORD, DWORD, DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ D3DCLIPSTATUS9*) PURE;
    STDMETHOD(GetClipStatus)(THIS_ D3DCLIPSTATUS9*) PURE;
    STDMETHOD(DrawPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE, DWORD, LPD3DDRAWPRIMITIVESTRIDEDDATA, DWORD, DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE, DWORD, LPD3DDRAWPRIMITIVESTRIDEDDATA, DWORD, LPWORD, DWORD, DWORD) PURE;
    STDMETHOD(DrawPrimitiveVB)(THIS_ D3DPRIMITIVETYPE, void*, DWORD, DWORD, DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE, void*, DWORD, DWORD, LPWORD, DWORD, DWORD) PURE;
    STDMETHOD(ComputeSphereVisibility)(THIS_ void*, float*, DWORD, DWORD, LPDWORD) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD, LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD, LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD, D3DTEXTURESTAGESTATETYPE, LPDWORD) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD, D3DTEXTURESTAGESTATETYPE, DWORD) PURE;
    STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
    STDMETHOD(ApplyStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CaptureStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(DeleteStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CreateStateBlock)(THIS_ D3DSTATEBLOCKTYPE, LPDWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECTDRAWSURFACE7, LPPOINT, LPDIRECTDRAWSURFACE7, LPRECT, DWORD) PURE;
    STDMETHOD(LightEnable)(THIS_ DWORD, BOOL) PURE;
    STDMETHOD(GetLightEnable)(THIS_ DWORD, BOOL*) PURE;
    STDMETHOD(SetClipPlane)(THIS_ DWORD, float*) PURE;
    STDMETHOD(GetClipPlane)(THIS_ DWORD, float*) PURE;
    STDMETHOD(GetInfo)(THIS_ DWORD, LPVOID, DWORD) PURE;
};

DECLARE_INTERFACE_(IDirect3D7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /*** IDirect3D7 methods ***/
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK7, LPVOID) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID, LPDIRECTDRAWSURFACE7, void**) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ LPD3DVERTEXBUFFERDESC, void**, DWORD) PURE;
    STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID, LPD3DENUMPIXELFORMATSCALLBACK, LPVOID) PURE;
    STDMETHOD(EvictManagedTextures)(THIS) PURE;
};

DECLARE_INTERFACE_(IDirect3DVertexBuffer7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /*** IDirect3DVertexBuffer7 methods ***/
    STDMETHOD(Lock)(THIS_ DWORD, LPVOID*, LPDWORD) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(ProcessVertices)(THIS_ DWORD, DWORD, DWORD, void*, DWORD, void*, DWORD) PURE;
    STDMETHOD(GetVertexBufferDesc)(THIS_ LPD3DVERTEXBUFFERDESC) PURE;
    STDMETHOD(Optimize)(THIS_ void*, DWORD) PURE;
    STDMETHOD(ProcessVerticesStrided)(THIS_ DWORD, DWORD, DWORD, LPD3DDRAWPRIMITIVESTRIDEDDATA, DWORD, void*, DWORD) PURE;
};

static const DWORD D3D9_GammaCorrection[] =
{
    0xffff0200, 0x002ffffe, 0x42415443, 0x0000001c, 0x0000008f, 0xffff0200,
    0x00000002, 0x0000001c, 0x00009100, 0x00000088, 0x00000044, 0x00000002,
    0x00020001, 0x00000050, 0x00000000, 0x00000060, 0x00000003, 0x00000001,
    0x00000078, 0x00000000, 0x736e6f63, 0x746e6174, 0xabab0073, 0x00030001,
    0x00040001, 0x00000001, 0x00000000, 0x53656874, 0x6c706d61, 0x742b7265,
    0x65546568, 0x72757478, 0xabab0065, 0x00070004, 0x00040001, 0x00000001,
    0x00000000, 0x325f7370, 0x4d00305f, 0x6f726369, 0x74666f73, 0x29522820,
    0x534c4820, 0x6853204c, 0x72656461, 0x6d6f4320, 0x656c6970, 0x30312072,
    0xab00312e, 0x05000051, 0xa00f0001, 0xbf000000, 0x3f000000, 0x00000000,
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x90000000,
    0xa00f0800, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40800, 0x03000002,
    0x800f0000, 0x80e40000, 0xa0000001, 0x02000001, 0x80080001, 0xa0aa0000,
    0x04000004, 0x801f0000, 0x80ff0001, 0x80e40000, 0xa0550001, 0x03000005,
    0x800f0000, 0x80e40000, 0xa0550000, 0x0200000f, 0x80010001, 0x80000000,
    0x0200000f, 0x80020001, 0x80550000, 0x0200000f, 0x80040001, 0x80aa0000,
    0x0200000f, 0x80080001, 0x80ff0000, 0x03000005, 0x800f0000, 0x80e40001,
    0xa0000000, 0x0200000e, 0x80110001, 0x80000000, 0x0200000e, 0x80120001,
    0x80550000, 0x0200000e, 0x80140001, 0x80aa0000, 0x0200000e, 0x80180001,
    0x80ff0000, 0x02000001, 0x800f0800, 0x80e40001, 0x0000ffff
};

#endif
